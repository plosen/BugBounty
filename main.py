import logging
import os
import json
import argparse
import time
import sys
from tools import (
    run_kali_tool, enumerate_domains, scan_vulnerabilities, fuzz_targets,
    analyze_code, perform_sqlmap_scan, analyze_with_wordlists, run_burp_suite
)
from api_integration import ask_chatgpt
from tester import perform_tests, generate_test_plan, execute_test_plan
from config import DEFAULT_DOMAIN, DEFAULT_CODE_DIRECTORY
from api_integration import openai_api_key

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è MAIN.py
logging.basicConfig(
    filename='main_error_log.txt',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –æ–±—â–∏—Ö –ª–æ–≥–æ–≤
general_logger = logging.getLogger('general')
general_logger.setLevel(logging.INFO)
general_handler = logging.FileHandler('general_log.txt')
general_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
general_logger.addHandler(general_handler)

def perform_task_with_progress(task_name, task_function, *args, **kwargs):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Å —Ç–∞–π–º–µ—Ä–æ–º –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º.
    """
    print(f"üîÑ {task_name} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
    general_logger.info(f"{task_name} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        for _ in range(5):
            sys.stdout.write(".")
            sys.stdout.flush()
            time.sleep(1)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
        result = task_function(*args, **kwargs)

        print(f"\n{task_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        general_logger.info(f"{task_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result}")
        
        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_name}: {str(e)}")
        general_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_name}: {str(e)}")
        return None

def enumerate_domains_with_progress(domain):
    """
    –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ `enumerate_domains` —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    """
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ –¥–ª—è {domain}...")
    general_logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ –¥–ª—è {domain}.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    try:
        # –ó–∞–ø—É—Å–∫ —Å–∞–º–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
        subdomains = enumerate_domains(domain)

        # –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É)
        for _ in range(5):
            sys.stdout.write(".")
            sys.stdout.flush()
            time.sleep(1)

        print("\n–ü–æ–¥–¥–æ–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω—ã.")
        general_logger.info(f"–ü–æ–¥–¥–æ–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {domain}: {subdomains}")
        
        return subdomains

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤: {str(e)}")
        general_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ –¥–ª—è {domain}: {str(e)}")
        return []

def main():
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="Automated Bug Bounty Testing Tool")
    parser.add_argument("-d", "--domain", default=DEFAULT_DOMAIN, help="Target domain for testing")
    parser.add_argument("-c", "--code_dir", default=DEFAULT_CODE_DIRECTORY, help="Directory of the project code for analysis")
    args = parser.parse_args()

    domain = args.domain
    code_directory = args.code_dir

    print("Starting Automated Bug Bounty Testing with Enhanced Tools...\n")
    general_logger.info("Bug Bounty Testing Started.")

    try:
        # 1. –°–±–æ—Ä –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
        subdomains = enumerate_domains_with_progress(domain)

        # 2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        vulnerabilities = perform_task_with_progress("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π", scan_vulnerabilities, subdomains)

        # 3. –§–∞–∑–∑–∏–Ω–≥ (fuzzing)
        fuzz_results = perform_task_with_progress("–§–∞–∑–∑–∏–Ω–≥", fuzz_targets, subdomains)

        # 4. SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
        sqlmap_results = perform_task_with_progress("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏", perform_sqlmap_scan, subdomains)

        # 5. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        code_analysis = perform_task_with_progress("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", analyze_code, code_directory)

        # 6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π
        wordlist_results = perform_task_with_progress("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–ª–æ–≤–∞—Ä—è–º–∏", analyze_with_wordlists, subdomains)

        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é BurpSuite
        burp_results = []
        for subdomain in subdomains.splitlines():
            subdomain = subdomain.strip()
            if subdomain:
                burp_result = run_burp_suite(subdomain)
                burp_results.append(burp_result)
        burp_results_combined = "\n".join(burp_results)

        # 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PoC —ç–∫—Å–ø–ª–æ–π—Ç–∞ —Å –ø–æ–º–æ—â—å—é ChatGPT
        prompt = (
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤:\n{subdomains}\n"
            f"–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π:\n{vulnerabilities}\n"
            f"–§–∞–∑–∑–∏–Ω–≥–∞:\n{fuzz_results}\n"
            f"SQL-–∏–Ω—ä–µ–∫—Ü–∏–π:\n{sqlmap_results}\n"
            f"–ê–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:\n{code_analysis}\n"
            f"–¢–µ—Å—Ç–æ–≤ —Å wordlists:\n{wordlist_results}\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ BurpSuite:\n{burp_results_combined}\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–∏ PoC —ç–∫—Å–ø–ª–æ–π—Ç."
        )
        exploit = ask_chatgpt(prompt)
        print("\nGenerated PoC Exploit:")
        print(exploit)
        general_logger.info(f"Generated PoC Exploit:\n{exploit}")

        # 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é ChatGPT
        test_plan = generate_test_plan(
            vulnerabilities, fuzz_results, sqlmap_results, code_analysis, wordlist_results, burp_results_combined
        )
        if test_plan:
            print("\nGenerated Test Plan:")
            print(json.dumps(test_plan, indent=4, ensure_ascii=False))
            general_logger.info(f"Generated Test Plan:\n{json.dumps(test_plan, indent=4, ensure_ascii=False)}")

            print("\nExecuting test plan...")
            execute_test_plan(test_plan)
            general_logger.info("Executed test plan.")
        else:
            print("Failed to generate a valid test plan.")
            general_logger.error("Failed to generate a valid test plan.")

        # 10. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
        test_results = perform_task_with_progress("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã", perform_tests, subdomains)

        print("\nTesting complete. Ensure compliance with Doppler's Bug Bounty rules.")
        general_logger.info("Bug Bounty Testing Completed Successfully.")

    except Exception as e:
        error_message = f"An unexpected error occurred: {str(e)}"
        logging.error(error_message)
        general_logger.error(error_message)
        print(error_message)

if __name__ == "__main__":
    main()
