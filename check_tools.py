# check_tools.py

import os
import subprocess
import logging
from config import (
    AMASS_PATH, NMAP_PATH, NIKTO_PATH, FFUF_PATH,
    SQLMAP_PATH, BANDIT_PATH, WFUZZ_PATH,
    BURP_SCANNER_PATH, COMMON_WORDLIST, SECLISTS_WORDLIST
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='tools_check_log.txt',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∏—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤–µ—Ä—Å–∏–∏
TOOLS = {
    "Amass": {
        "path": AMASS_PATH,
        "version_cmd": ["-version"],  # –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è Amass
        "description": "Tool for in-depth DNS enumeration and asset discovery."
    },
    "Nmap": {
        "path": NMAP_PATH,
        "version_cmd": ["--version"],  # –§–ª–∞–≥ –¥–ª—è Nmap
        "description": "Network scanner for discovering devices and services."
    },
    "Nikto": {
        "path": NIKTO_PATH,
        "version_cmd": ["-Version"],  # –§–ª–∞–≥ –¥–ª—è Nikto
        "description": "Web server scanner for detecting vulnerabilities."
    },
    "FFUF": {
        "path": FFUF_PATH,
        "version_cmd": ["-V"],  # –§–ª–∞–≥ –¥–ª—è FFUF
        "description": "Fast web fuzzer for discovering hidden directories and files."
    },
    "SQLMap": {
        "path": SQLMAP_PATH,
        "version_cmd": ["--version"],  # –§–ª–∞–≥ –¥–ª—è SQLMap
        "description": "Automated tool for detecting and exploiting SQL injection flaws."
    },
    "Bandit": {
        "path": BANDIT_PATH,
        "version_cmd": ["--version"],  # –§–ª–∞–≥ –¥–ª—è Bandit
        "description": "Security linter for Python code."
    },
    "WFuzz": {
        "path": WFUZZ_PATH,
        "version_cmd": ["--version"],  # –§–ª–∞–≥ –¥–ª—è WFuzz
        "description": "Web fuzzer for discovering hidden resources and vulnerabilities."
    },
    "BurpSuite Scanner": {
        "path": BURP_SCANNER_PATH,
        "version_cmd": [],  # BurpSuite Scanner –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤–µ—Ä—Å–∏–∏
        "description": "Comprehensive web vulnerability scanner."
    }
}

WORDLISTS = {
    "Common Wordlist": COMMON_WORDLIST,
    "SecLists Wordlist": SECLISTS_WORDLIST
}

def is_executable(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º."""
    return os.path.isfile(file_path) and os.access(file_path, os.X_OK)

def check_tool_availability(tool_name, tool_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    if not os.path.exists(tool_path):
        logging.error(f"{tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {tool_path}")
        print(f"‚ùå {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {tool_path}")
        return False
    if not is_executable(tool_path):
        logging.error(f"{tool_name} –ø–æ –ø—É—Ç–∏ {tool_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º.")
        print(f"‚ùå {tool_name} –ø–æ –ø—É—Ç–∏ {tool_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º.")
        return False
    logging.info(f"{tool_name} –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É—Ç–∏: {tool_path}")
    print(f"‚úÖ {tool_name} –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É—Ç–∏: {tool_path}")
    return True

def check_tool_functionality(tool_name, tool_path, version_cmd):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø—É—Ç–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤–µ—Ä—Å–∏–∏."""
    if not version_cmd:
        # –î–ª—è BurpSuite Scanner –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏
        logging.info(f"{tool_name} –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print(f"‚úÖ {tool_name} –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return True
    cmd = [tool_path] + version_cmd
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version_info = result.stdout.strip() if result.stdout else result.stderr.strip()
            logging.info(f"{tool_name} —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω. –í–µ—Ä—Å–∏—è: {version_info}")
            print(f"‚úÖ {tool_name} —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω. –í–µ—Ä—Å–∏—è: {version_info}")
            return True
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {tool_name}: {result.stderr.strip()}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {tool_name}: {result.stderr.strip()}")
            return False
    except subprocess.TimeoutExpired:
        logging.error(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {tool_name} –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ø—Ä–µ–¥–µ–ª.")
        print(f"‚ùå –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {tool_name} –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ø—Ä–µ–¥–µ–ª.")
        return False
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å {tool_name}: {str(e)}")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å {tool_name}: {str(e)}")
        return False

def check_wordlist_availability(wordlist_name, wordlist_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å wordlist-–∞."""
    if not os.path.exists(wordlist_path):
        logging.error(f"{wordlist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {wordlist_path}")
        print(f"‚ùå {wordlist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {wordlist_path}")
        return False
    if not os.access(wordlist_path, os.R_OK):
        logging.error(f"{wordlist_name} –ø–æ –ø—É—Ç–∏ {wordlist_path} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è.")
        print(f"‚ùå {wordlist_name} –ø–æ –ø—É—Ç–∏ {wordlist_path} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è.")
        return False
    logging.info(f"{wordlist_name} –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω: {wordlist_path}")
    print(f"‚úÖ {wordlist_name} –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω: {wordlist_path}")
    return True

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ wordlist-–æ–≤...\n")
    all_checks_passed = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    for tool_name, tool_info in TOOLS.items():
        tool_path = tool_info["path"]
        version_cmd = tool_info["version_cmd"]
        description = tool_info.get("description", "")

        print(f"üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ {tool_name}: {description}")
        available = check_tool_availability(tool_name, tool_path)
        if not available:
            all_checks_passed = False
            continue

        functional = check_tool_functionality(tool_name, tool_path, version_cmd)
        if not functional:
            all_checks_passed = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ wordlist-–æ–≤
    for wordlist_name, wordlist_path in WORDLISTS.items():
        print(f"üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {wordlist_name}: {wordlist_path}")
        available = check_wordlist_availability(wordlist_name, wordlist_path)
        if not available:
            all_checks_passed = False

    if all_checks_passed:
        logging.info("–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ wordlist-–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\n‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ wordlist-–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        logging.error("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–ª–∏ wordlist-–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–ª–∏ wordlist-–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        exit(1)

if __name__ == "__main__":
    main()
